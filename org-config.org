#+TITLE: org-config
#+DESCRIPTION: A Post-installation script for my emacs org-config
#+AUTHOR: Tolemariam Fufa Teso
#+PROPERTY: header-args :tangle ~/.emacs.d/org-config.el
#+auto_tangle: t
#+STARTUP: showeverything

* Org Configuratation :toc:
#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))
  ;;
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/org/Personal.org"
          "~/org/Projects.org"
          "~/org/Tasks.org"
          "~/org/Work.org"))
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
  ;;
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
  ;;
  (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
    ("Tasks.org" :maxlevel . 1)))
  ;;
  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  ;;  
  (setq org-tag-alist
        '(;; Places
          ("@home" . ?H)
          ("@work" . ?W)

          ;; Devices
          ("@computer" . ?C)
          ("@phone" . ?P)

          ;; Activities
          ("@planning" . ?n)
          ("@programming" . ?p)
          ("@writing" . ?w)
          ("@creative" . ?c)
          ("@email" . ?e)
          ("@calls" . ?a)
          ("@errands" . ?r)))
  ;;

  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
      ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
      ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
      ((org-agenda-overriding-header "Waiting on External")
       (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
      ((org-agenda-overriding-header "In Review")
       (org-agenda-files org-agenda-files)))
      (todo "PLAN"
      ((org-agenda-overriding-header "In Planning")
       (org-agenda-todo-list-sublevels nil)
       (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
      ((org-agenda-overriding-header "Project Backlog")
       (org-agenda-todo-list-sublevels nil)
       (org-agenda-files org-agenda-files)))
      (todo "READY"
      ((org-agenda-overriding-header "Ready for Work")
       (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
      ((org-agenda-overriding-header "Active Projects")
       (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
      ((org-agenda-overriding-header "Completed Projects")
       (org-agenda-files org-agenda-files)))
      (todo "CANC"
      ((org-agenda-overriding-header "Cancelled Projects")
       (org-agenda-files org-agenda-files)))))))
  ;;
  ;;
  (setq org-capture-templates
        `(("t" "Tasks / Projects")
    ("tt" "Task" entry (file+olp "~/org/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

    ("j" "Journal Entries")
    ("jj" "Journal" entry
           (file+olp+datetree "~/org/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
    ("jm" "Meeting" entry
           (file+olp+datetree "~/org/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

    ("w" "Workflows")
    ("we" "Checking Email" entry (file+olp+datetree "~/org/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

    ("m" "Metrics Capture")
    ("mw" "Weight" table-line (file+headline "~/org/Metrics.org" "Weight")
     "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
  ;;
  ;;

  (define-key global-map (kbd "C-c j")
        (lambda () (interactive) (org-capture nil "jj")))
  ;;
  ;;
  (global-set-key (kbd "C-c b a") #'org-agenda)
  ;;
  ;;
  (setq org-log-done 'time)
  (setq org-agenda-start-with-log-mode t)

  (setq org-agenda-custom-commands
        '(("p" "Planning"
           ((tags-todo "+@planning"
                       ((org-agenda-overriding-header "Planning Tasks")))
            (tags-todo "-{.*}"
                       ((org-agenda-overriding-header "Untagged Tasks")))
            (todo ".*" ((org-agenda-files '("~/Notes/Inbox.org"))
            (org-agenda-overriding-header "Unprocessed Inbox Items")))))

          ("d" "Daily Agenda"
           ((agenda "" ((org-agenda-span 'day)
            (org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority Tasks")))))

          ("w" "Weekly Review"
           ((agenda ""
                    ((org-agenda-overriding-header "Completed Tasks")
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'done))
                     (org-agenda-span 'week)))

            (agenda ""
                    ((org-agenda-overriding-header "Unfinished Scheduled Tasks")
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-span 'week)))))))
  ;;
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 280)
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  ;;
  (setq ef-themes-headings
        '((1 light variable-pitch 1.5)
          (2 regular 1.3)
          (3 1.1)
          (agenda-date 1.3)
          (agenda-structure variable-pitch light 1.8)
          (t variable-pitch)))
  ;;
  (setq denote-directory (expand-file-name "~/denote"))
  (setq denote-known-keywords '("emacs" "denote" "org"))
  ;; default is Org ---others are Markdown+{TOML,YAML} and plain text
  (setq denote-file-type nil)

  (add-hook 'dired-mode-hook #'denote-dired-mode)
  ;; org-auto-tangle
  (use-package org-auto-tangle 
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t))
  ;;
#+end_src

* org-modern-mode
#+begin_src emacs-lisp
  (with-eval-after-load 'org (global-org-modern-mode))
#+end_src
